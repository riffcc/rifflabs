"use strict";(self.webpackChunkrifflab_docs=self.webpackChunkrifflab_docs||[]).push([[668],{8246:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var s=t(5893),r=t(1151);const o={sidebar_position:2},i="Startup procedures",l={id:"maintain/procedures/startup-procedures",title:"Startup procedures",description:"Carefully rehydrating the Riff Lab is a delicate process that takes some coordination. Any improvements to automation that can be created to make this process easier are welcome. All suggestions encouraged.",source:"@site/docs/maintain/procedures/startup-procedures.md",sourceDirName:"maintain/procedures",slug:"/maintain/procedures/startup-procedures",permalink:"/docs/maintain/procedures/startup-procedures",draft:!1,unlisted:!1,editUrl:"https://github.com/riffcc/rifflabs/tree/main/packages/create-docusaurus/templates/shared/docs/maintain/procedures/startup-procedures.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"maintainSidebar",previous:{title:"Shutdown procedures",permalink:"/docs/maintain/procedures/shutdown-procedures"}},a={},c=[{value:"Getting started",id:"getting-started",level:2},{value:"Start the smart wall socket",id:"start-the-smart-wall-socket",level:2},{value:"Start the Core Services nodes",id:"start-the-core-services-nodes",level:2},{value:"Start the UniFi controller",id:"start-the-unifi-controller",level:2},{value:"Start the Main Proxmox cluster",id:"start-the-main-proxmox-cluster",level:2},{value:"Start the MooseFS filesystem",id:"start-the-moosefs-filesystem",level:2},{value:"Ensure Rancher Longhorn is fully functional",id:"ensure-rancher-longhorn-is-fully-functional",level:2},{value:"Start MergerFS on each of the main Proxmox hosts",id:"start-mergerfs-on-each-of-the-main-proxmox-hosts",level:2},{value:"Start the nfs-kernel-service process",id:"start-the-nfs-kernel-service-process",level:2},{value:"Start the Farmer",id:"start-the-farmer",level:2},{value:"Start the Secondary Plotters",id:"start-the-secondary-plotters",level:2},{value:"Monitor the health of the cluster",id:"monitor-the-health-of-the-cluster",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"startup-procedures",children:"Startup procedures"}),"\n",(0,s.jsx)(n.p,{children:"Carefully rehydrating the Riff Lab is a delicate process that takes some coordination. Any improvements to automation that can be created to make this process easier are welcome. All suggestions encouraged."}),"\n",(0,s.jsx)(n.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Gather a rough idea of the state of the lab. Potentially take a quick photo and make a note of the event."}),"\n",(0,s.jsx)(n.li,{children:"If anything is messy or out of place, clean it up before you get started."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"start-the-smart-wall-socket",children:"Start the smart wall socket"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Turn on the wall socket to power on all equipment."}),"\n",(0,s.jsx)(n.li,{children:"Turn on the UPSes"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"start-the-core-services-nodes",children:"Start the Core Services nodes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ensure Coheed, Cambria and Creature are all running. Take note if one isn't."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"start-the-unifi-controller",children:"Start the UniFi controller"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Go to ",(0,s.jsx)(n.a,{href:"https://coresvc.riff.cc:8006",children:"https://coresvc.riff.cc:8006"})," and login. Then, under coheed, make sure ",(0,s.jsx)(n.code,{children:"unifi01"})," is started and running."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"It's at this point that all main network services should be online for Abhorsen's House."})}),"\n",(0,s.jsx)(n.h2,{id:"start-the-main-proxmox-cluster",children:"Start the Main Proxmox cluster"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Start up al, ambellina, monstar, inferno, sizer, unless any were off for a reason."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"start-the-moosefs-filesystem",children:"Start the MooseFS filesystem"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Connect to the MooseFS master node (currently monstar) and start the MooseFS master service. This will allow the MooseFS filesystem to be mounted on the MooseFS master node.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["SSH to ambellina as root and run ",(0,s.jsx)(n.code,{children:"systemctl start moosefs-pro-master"})]}),"\n",(0,s.jsxs)(n.li,{children:["Then check if the MooseFS master service successfully started:\n",(0,s.jsx)(n.code,{children:"systemctl status moosefs-pro-master"})," (Q to quit back to the shell)"]}),"\n",(0,s.jsxs)(n.li,{children:["If it failed to start, run ",(0,s.jsx)(n.code,{children:"mfsmaster -a"})," to start in recovery mode. You may want to do this in a separate ",(0,s.jsx)(n.code,{children:"screen"})," session."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["You can enter a screen session by typing ",(0,s.jsx)(n.code,{children:"screen -S nameofyourchoice"}),". You can then detach from the screen session by holding Control, hitting A, then D. You can reattach to the screen session by typing ",(0,s.jsx)(n.code,{children:"screen -r nameofyourchoice"}),"."]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Connect to each MooseFS chunkserver node (currently al, ambellina, monstar) and start the MooseFS chunkserver service. This will allow the MooseFS filesystem to be mounted on the MooseFS chunkserver nodes.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["SSH to each host as root and run ",(0,s.jsx)(n.code,{children:"systemctl start moosefs-pro-chunkserver"})]}),"\n",(0,s.jsxs)(n.li,{children:["Then check if the MooseFS chunkserver service successfully started:\n",(0,s.jsx)(n.code,{children:"systemctl status moosefs-pro-chunkserver"})," (Q to quit back to the shell)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"ensure-rancher-longhorn-is-fully-functional",children:"Ensure Rancher Longhorn is fully functional"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["On each host, run ",(0,s.jsx)(n.code,{children:"df -h /mnt/longhorn"})," and check that each mount is functional.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"They should look like this:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Filesystem                Size  Used Avail Use% Mounted on\n/dev/mapper/pve-longhorn  1.5T  104G  1.3T   8% /mnt/longhorn\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If they do not, ",(0,s.jsx)(n.code,{children:"umount /mnt/longhorn"})," and then ",(0,s.jsx)(n.code,{children:"mount /mnt/longhorn"})," to remount them."]}),"\n",(0,s.jsxs)(n.li,{children:["If needed, run ",(0,s.jsx)(n.code,{children:"lsof /mnt/longhorn"})," to find any processes locking /mnt/longhorn and then kill them with ",(0,s.jsx)(n.code,{children:"kill $PID"})," where $PID is the process ID of the process."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Go to ",(0,s.jsx)(n.a,{href:"https://rancher.riff.cc",children:"https://rancher.riff.cc"}),", sign in with your Authentik credentials, and then go to the Longhorn section and check that all replicas are healthy."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"start-mergerfs-on-each-of-the-main-proxmox-hosts",children:"Start MergerFS on each of the main Proxmox hosts"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"This concerns al, ambellina, monstar, inferno, sizer"}),"\n",(0,s.jsxs)(n.li,{children:["On each host, run ",(0,s.jsx)(n.code,{children:"df -h /mnt/plots"})," and check that each mount is functional.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If they are not, run ",(0,s.jsx)(n.code,{children:"umount /mnt/plots"})," and then ",(0,s.jsx)(n.code,{children:"mount /mnt/plots"})," to remount them."]}),"\n",(0,s.jsxs)(n.li,{children:["If needed, run ",(0,s.jsx)(n.code,{children:"lsof /mnt/plots"})," to find any processes locking /mnt/plots and then kill them with ",(0,s.jsx)(n.code,{children:"kill $PID"})," where $PID is the process ID of the process."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"start-the-nfs-kernel-service-process",children:"Start the nfs-kernel-service process"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["On sizer, ambellina, al, run ",(0,s.jsx)(n.code,{children:"systemctl start nfs-kernel-server"})]}),"\n",(0,s.jsxs)(n.li,{children:["On monstar, make sure all three mounts are successfully mounted:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"mount -a"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"mount | grep nfs"})}),"\n",(0,s.jsxs)(n.li,{children:["If they are not, run ",(0,s.jsx)(n.code,{children:"mount -a"})," again or ",(0,s.jsx)(n.code,{children:"umount $mountpoint"})," and then ",(0,s.jsx)(n.code,{children:"mount $mountpoint"})," to remount them."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"start-the-farmer",children:"Start the Farmer"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Log onto the Farmer (",(0,s.jsx)(n.code,{children:"ssh monstar.riff.cc"}),") and run"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"./start-plotsink.sh\n./start-plotmover.sh\n./start-farmer.sh\n"})}),"\n",(0,s.jsx)(n.h2,{id:"start-the-secondary-plotters",children:"Start the Secondary Plotters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Log onto Al, Ambellina and Inferno and run the following:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"./start-plotsink.sh\n./start-plotmover.sh\n./start-plotter.sh\n"})}),"\n",(0,s.jsx)(n.h2,{id:"monitor-the-health-of-the-cluster",children:"Monitor the health of the cluster"}),"\n",(0,s.jsxs)(n.p,{children:["Visit ",(0,s.jsx)(n.a,{href:"http://monitoring.riff.cc/monitoring",children:"http://monitoring.riff.cc/monitoring"}),", log in, and check that everything looks in reasonable health."]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"There will be plenty of alarm bells ringing in CheckMK (our monitoring system) for the next few weeks, so don't be too alarmed if there are CRITICAL alerts."})})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>i});var s=t(7294);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);