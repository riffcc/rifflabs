"use strict";(self.webpackChunkrifflab_docs=self.webpackChunkrifflab_docs||[]).push([[839],{8238:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=s(5893),r=s(1151);const o={sidebar_position:3},i="Ansible Semaphore",l={id:"build/getting-airborne/ansible-semaphore",title:"Ansible Semaphore",description:"Time for some automation!",source:"@site/docs/build/getting-airborne/ansible-semaphore.md",sourceDirName:"build/getting-airborne",slug:"/build/getting-airborne/ansible-semaphore",permalink:"/docs/build/getting-airborne/ansible-semaphore",draft:!1,unlisted:!1,editUrl:"https://github.com/riffcc/rifflabs/tree/main/packages/create-docusaurus/templates/shared/docs/build/getting-airborne/ansible-semaphore.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"buildSidebar",previous:{title:"Building the base playbook",permalink:"/docs/build/getting-airborne/building-the-base-playbook"}},t={},p=[{value:"What is Ansible Semaphore?",id:"what-is-ansible-semaphore",level:2},{value:"Installing Ansible Semaphore",id:"installing-ansible-semaphore",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"ansible-semaphore",children:"Ansible Semaphore"}),"\n",(0,a.jsx)(n.p,{children:"Time for some automation!"}),"\n",(0,a.jsx)(n.h2,{id:"what-is-ansible-semaphore",children:"What is Ansible Semaphore?"}),"\n",(0,a.jsx)(n.p,{children:"Ansible Semaphore is a web-based UI for Ansible. It allows you to run Ansible playbooks and jobs from a web interface, and provides a nice way to organize your playbooks and jobs."}),"\n",(0,a.jsx)(n.h2,{id:"installing-ansible-semaphore",children:"Installing Ansible Semaphore"}),"\n",(0,a.jsxs)(n.p,{children:["We'll take the machine we built earlier, ",(0,a.jsx)(n.code,{children:"robot01"}),", and set up Ansible Semaphore on it."]}),"\n",(0,a.jsx)(n.p,{children:"However, we won't do this manually. From now on, pretty much everything we do will be done with some form of automation. We'll use Ansible to install Ansible Semaphore."}),"\n",(0,a.jsx)(n.p,{children:"Start by making a new host group called [semaphore] in your inventory file, and add robot01 to it."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ini",children:"---\n...\n[semaphore]\nrobot01\n"})}),"\n",(0,a.jsx)(n.p,{children:"Make a new playbook, called ansible-semaphore-playbook."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"mkdir -p ~/projects/rifflab-infrastructure/playbooks/ansible-semaphore-playbook/roles"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"playbooks/ansible-semaphore-playbook/deploy.yml"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"---\n- name: Install and configure Semaphore\n  hosts: semaphore\n  become: true\n\n  roles:\n    - geerlingguy.docker\n    - ansible-semaphore\n"})}),"\n",(0,a.jsx)(n.p,{children:"Create a requirements file for the role we'll be using:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"---\nroles:\n- name: geerlingguy.docker\n  version: 7.0.2\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now create the main ansible-semaphore role:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"mkdir -p ~/projects/rifflab-infrastructure/playbooks/ansible-semaphore-playbook/roles/ansible-semaphore/tasks"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"playbooks/ansible-semaphore-playbook/roles/ansible-semaphore/tasks/main.yml"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"---\n- name: Create Ansible Semaphore group\n  group:\n    name: semaphore\n    state: present\n\n- name: Create Ansible Semaphore user\n  user:\n    name: semaphore\n    shell: /bin/bash\n    home: /opt/semaphore\n    createhome: yes\n\n- name: Create Docker Compose file for Ansible Semaphore\n  template:\n    src: docker-compose.yml.j2\n    dest: /opt/semaphore/docker-compose.yml\n    owner: semaphore\n    group: semaphore\n\n- name: Bring up Ansible Semaphore using Docker Compose\n  ansible.builtin.command:\n    chdir: /opt/semaphore\n    cmd: docker-compose up -d\n    # TODO: Make this more idempotent\n"})}),"\n",(0,a.jsx)(n.p,{children:"Create a templates folder in the roles/ansible-semaphore folder, and create a new file called docker-compose.yml.j2 inside it:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir -p roles/ansible-semaphore/templates\neditor roles/ansible-semaphore/templates/docker-compose.yml.j2\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"playbooks/ansible-semaphore-playbook/roles/ansible-semaphore/templates/docker-compose.yml.j2"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"services:\n  semaphore:\n    restart: unless-stopped\n    ports:\n      - 3000:3000\n    image: semaphoreui/semaphore:latest\n    environment:\n{% if semaphore_ldap_config is defined %}\n      {{ semaphore_ldap_config }}\n{% endif %}\n{% if semaphore_database_config is defined %}\n      {{ semaphore_database_config }}\n{% else %}\n      SEMAPHORE_DB_DIALECT: bolt\n{% endif %}\n      SEMAPHORE_ADMIN_PASSWORD: {{ semaphore_initial_password }}\n      SEMAPHORE_ADMIN_NAME: {{ semaphore_admin_name }}\n      SEMAPHORE_ADMIN_EMAIL: {{ semaphore_admin_email }}\n      SEMAPHORE_ADMIN: {{ semaphore_admin_username }}\n      SEMAPHORE_ACCESS_KEY_ENCRYPTION: {{ semaphore_encryption_secret_key }}\n    volumes:\n      - /opt/semaphore/data/etc:/etc/semaphore\n{% if semaphore_database_config is not defined %}\n      - /opt/semaphore/data/db:/var/lib/semaphore\n{% endif %}```\n\nWe've defined a bunch of variables in the docker-compose.yml.j2 file. You've probably noticed by now that we're using Jinja2's \"handlebars\" syntax, `{{ variable_name }}` to reference variables and use them in our templates. We'll need a way of using these variables later, but we don't want to store them in \"plaintext\". This is where a tool called Ansible Vault comes in.\n\n## Ansible Vault\nAnsible Vault is a tool that allows you to encrypt sensitive data, such as passwords, API keys, and more. We'll use it to encrypt the variables we're using in our docker-compose.yml.j2 template.\n\nWe'll create a new Git repository called `rifflabs-secret`, and store our encrypted variables in there.\n\n```bash\nmkdir -p ~/projects/rifflabs-secret\ncd ~/projects/rifflabs-secret\ngit init\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Inside, we'll mirror our directory structure for the inventory we've been using so far. Then we'll do a little trick; we'll create a symlink for the ",(0,a.jsx)(n.code,{children:"hosts"})," file in our ",(0,a.jsx)(n.code,{children:"rifflabs-secret"})," repository, and point it to the ",(0,a.jsx)(n.code,{children:"hosts"})," file in our ",(0,a.jsx)(n.code,{children:"rifflabs-infrastructure"})," repository."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir -p inventory/group_vars/ && cd inventory/\nln -s '../../rifflabs-infrastructure/inventory/hosts' hosts\ncd ~/projects/rifflabs-secret\n"})})]})}function c(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>i});var a=s(7294);const r={},o=a.createContext(r);function i(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);